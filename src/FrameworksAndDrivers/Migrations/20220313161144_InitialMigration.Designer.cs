// <auto-generated />
using System;
using FrameworksAndDrivers.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FrameworksAndDrivers.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220313161144_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.CreditCardModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cvv");

                    b.Property<string>("ExpirationMonth")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("expiration_month");

                    b.Property<string>("ExpirationYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("expiration_year");

                    b.Property<string>("HolderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("holder_address");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("holder_name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("number");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("credit-card", "payment");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cvv = "323",
                            ExpirationMonth = "12",
                            ExpirationYear = "2025",
                            HolderAddress = "Heroic St. 195",
                            HolderName = "Antônio J. Penteado",
                            Number = "379354508162306",
                            StatusId = (short)1
                        });
                });

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.CreditStatusModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("credit-card-status", "payment");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Status = "Verified"
                        });
                });

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.MerchantModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BankAccountDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank-account-details");

                    b.HasKey("Id");

                    b.ToTable("merchant", "payment");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BankAccountDetails = "BankAccountDetails"
                        });
                });

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.PaymentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long>("CreditCardId")
                        .HasMaxLength(16)
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<long>("MerchantId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("merchant_id");

                    b.Property<string>("SaleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sale_description");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("StatusId");

                    b.ToTable("payment", "payment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc782e65-0117-4c5e-b6d0-afa845effa3e"),
                            Amount = 15.99m,
                            CreditCardId = 1L,
                            Currency = "EUR",
                            MerchantId = 1L,
                            SaleDescription = "Final soccer match",
                            StatusId = (short)1
                        });
                });

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.PaymentStatusModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("payment-status", "payment");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Status = "Received"
                        },
                        new
                        {
                            Id = (short)2,
                            Status = "Queued"
                        },
                        new
                        {
                            Id = (short)3,
                            Status = "PaymentCommited"
                        },
                        new
                        {
                            Id = (short)4,
                            Status = "PaymentRejected"
                        });
                });

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.CreditCardModel", b =>
                {
                    b.HasOne("FrameworksAndDrivers.Database.Models.CreditStatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FrameworksAndDrivers.Database.Models.PaymentModel", b =>
                {
                    b.HasOne("FrameworksAndDrivers.Database.Models.CreditCardModel", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrameworksAndDrivers.Database.Models.MerchantModel", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrameworksAndDrivers.Database.Models.PaymentStatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Merchant");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
